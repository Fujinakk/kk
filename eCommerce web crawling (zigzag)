pip install selenium
pip install wevdriver-manager
pip install pandas

from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
import time
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import ElementClickInterceptedException
import pandas as pd
import csv

# WebDriver 초기화
driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()))


# 스크롤 함수 정의
def scroll_down():
    """스크롤을 내리는 함수"""
    driver.execute_script("window.scrollBy(0, 1000);")
    time.sleep(2)  # 스크롤 후 로딩 대기


def scroll_down_slightly():
    """리뷰 페이지에서 스크롤을 조금씩 내리는 함수"""
    driver.execute_script("window.scrollBy(0, 800);")
    time.sleep(2)


# 1단계: 상품 정보 및 리뷰 URL 수집
driver.get('https://zigzag.kr/')

# 카테고리 클릭
category = driver.find_element(By.CSS_SELECTOR, '#__next > div.zds-themes.light-theme > div > div > a:nth-child(2) > div')
category.click()
time.sleep(5)

# 팬츠 클릭
pants = driver.find_element(By.XPATH, '//*[@id="__next"]/div[1]/main/section/section[2]/ul/li[1]/button[5]')
pants.click()
time.sleep(5)

# 와이드팬츠 클릭
widepants = driver.find_element(By.XPATH, '//*[@id="__next"]/div[1]/main/nav[3]/ul/li[6]')
widepants.click()
time.sleep(5)

# 직잭추천순 클릭
zigzag = driver.find_element(By.XPATH, '//*[@id="__next"]/div[1]/main/section[1]/button/span')
zigzag.click()
time.sleep(5)

# 리뷰많은순 클릭
review = driver.find_element(By.XPATH, '//*[@id="__next"]/div[1]/main/section[1]/div[2]/div[2]/div/ul/li[3]')
review.click()
time.sleep(5)

products = []  # 상품 정보 저장
review_urls = []  # 리뷰 URL 저장
previous_product_count = 0

while len(products) < 30:
    product_cards = driver.find_elements(By.CSS_SELECTOR, "div.product-card.css-79elbk")

    for card in product_cards:
        if len(products) >= 30:
            break

        try:
            # 상품 이름
            name = card.find_element(By.CSS_SELECTOR, "p.zds4_1kdomrc.zds4_1kdomra").text

            # 상품 가격
            try:
                price = card.find_element(By.CSS_SELECTOR,
                                          "span.zds4_s96ru86.zds4_s96ru8w.zds4_1jsf80i3.zds4_1jsf80i5").text
            except:
                price = "N/A"

            # 할인율
            try:
                sale_ratio = card.find_element(By.CSS_SELECTOR, "span.zds4_s96ru86.zds4_s96ru8w.zds4_1jsf80i2").text
            except:
                sale_ratio = "N/A"

            # 리뷰 평점 및 리뷰 개수
            try:
                review_rate = card.find_element(By.CSS_SELECTOR, "span.zds4_s96ru86.zds4_s96ru81h").text
                review_number = card.find_element(By.CSS_SELECTOR, "span.zds4_s96ru86.zds4_s96ru81i").text.strip("()")
            except:
                review_rate = "N/A"
                review_number = "N/A"

            # 상품 썸네일 URL
            try:
                thumbnail_url = card.find_element(By.CSS_SELECTOR, "img.zds4_11053yc2").get_attribute("src")
            except:
                thumbnail_url = "N/A"

            # 상품 URL
            original_url = card.find_element(By.CSS_SELECTOR, "a.css-152zj1o.product-card-link").get_attribute("href")

            # 리뷰 페이지 URL 생성
            review_url = f"{original_url}?tab=review"

            # 중복 확인 후 저장
            if any(p['name'] == name for p in products):
                continue

            products.append({
                'name': name,
                'price': price,
                'sale_ratio': sale_ratio,
                'review_rate': review_rate,
                'review_number': review_number,
                'thumbnail': thumbnail_url
            })
            review_urls.append(review_url)

        except Exception as e:
            print(f"상품 정보 추출 중 오류 발생: {e}")

    print(f"현재 수집된 상품 수: {len(products)}")

    # 스크롤
    if len(products) == previous_product_count:
        scroll_down()
    else:
        previous_product_count = len(products)

    if len(products) >= 30:
        break

print("상품 데이터 수집 완료!")
print(f"수집된 리뷰 URL 리스트: {review_urls}")


# 2단계: 리뷰 데이터 수집

# 스크롤 함수 정의 (조금씩 내리기)
def scroll_down_slightly(driver):
    driver.execute_script("window.scrollBy(0, 800);")
    time.sleep(2)  # 스크롤 후 페이지 로딩 대기


# WebDriver 설정
driver = webdriver.Chrome()  # 크롬 드라이버 사용 (경로 설정 필요)

all_reviews = []  # 모든 리뷰를 저장할 리스트
index = 1  # 리뷰 인덱스 초기값

for url in review_urls:
    driver.get(url)  # 각 URL로 이동
    print(f"현재 URL: {url}")

    # URL에서 product_id 추출
    product_id = url.split("/products/")[1].split("?")[0]

    collected_reviews = []  # 현재 URL에서 수집한 리뷰 리스트
    scroll_count = 0

    while len(collected_reviews) < 5 and scroll_count < 10:  # 최대 10번 스크롤 (안전장치)
        try:
            reviews = driver.find_elements(By.CSS_SELECTOR, "div[data-custom-ta-key='PDP_REVIEW_TAB_GROUP_18']")
        except Exception as e:
            print(f"리뷰 요소 찾기 중 오류 발생: {e}")
            break

        for review in reviews:
            if len(collected_reviews) >= 5:
                break

            try:
                # 리뷰어 정보 추출
                reviewer = review.find_element(By.CSS_SELECTOR, "span.BODY_14.SEMIBOLD.css-v0z0bg.e1oql6860").text

                # 리뷰 날짜 추출
                date = review.find_element(By.CSS_SELECTOR,
                                           "span.BODY_17.REGULAR.CAPTION_12.SEMIBOLD.css-e9zz9.e1oql6860").text

                # 리뷰 텍스트 추출 (더보기 버튼 처리 포함)
                try:
                    # "더보기" 버튼 감지 및 클릭 (CSS 선택자 사용)
                    more_button_selector = "span.BODY_13.BOLD.css-1aa4nqt.e1loaqv41"
                    more_button = review.find_elements(By.CSS_SELECTOR, more_button_selector)

                    if more_button:  # 더보기 버튼이 존재하는 경우
                        for attempt in range(3):  # 최대 3회 재시도
                            try:
                                driver.execute_script("arguments[0].scrollIntoView();", more_button[0])  # 버튼으로 스크롤
                                driver.execute_script("arguments[0].click();", more_button[0])  # JavaScript로 클릭 시도
                                print("더보기 버튼 클릭 완료.")

                                # '더보기' 클릭 후 텍스트 업데이트까지 대기
                                WebDriverWait(driver, 10).until(
                                    EC.visibility_of_element_located(
                                        (By.CSS_SELECTOR, "div.BODY_14.REGULAR.css-epr5m6.e1loaqv40"))
                                )
                                break  # 클릭 성공 시 루프 종료

                            except ElementClickInterceptedException:
                                print("클릭 가로막힘. 재시도 중...")
                                time.sleep(2)  # 잠시 대기 후 재시도

                    else:
                        # 더보기 버튼이 없으면 기존 방식으로 텍스트 추출
                        review_text = review.find_element(By.CSS_SELECTOR,
                                                          "div.BODY_14.REGULAR.css-epr5m6.e1loaqv40").text

                except Exception as e:
                    print(f"'더보기' 버튼 클릭 중 오류 발생: {e}")
                    review_text = review.find_element(By.CSS_SELECTOR, "div.BODY_14.REGULAR.css-epr5m6.e1loaqv40").text

                # 전체 텍스트 가져오기 (다시 시도)
                review_text = review.find_element(By.CSS_SELECTOR, "div.BODY_14.REGULAR.css-epr5m6.e1loaqv40").text

                # 리뷰 정보 저장
                collected_reviews.append({
                    "index": index,
                    "product_id": product_id,
                    "reviewer": reviewer,
                    "date": date,
                    "text": review_text.strip()  # 공백 제거
                })
                index += 1  # 인덱스 증가

            except Exception as e:
                print(f"리뷰 추출 중 오류 발생: {e}")

        # 스크롤 다운
        if len(collected_reviews) < 5:
            scroll_down_slightly(driver)
            scroll_count += 1

    print(f"수집된 리뷰 수: {len(collected_reviews)}")
    all_reviews.extend(collected_reviews)

# CSV 파일로 저장하기 (UTF-8 BOM 추가)
csv_file_path = 'reviews.csv'
with open(csv_file_path, mode='w', newline='', encoding='utf-8-sig') as file:
    writer = csv.DictWriter(file, fieldnames=["index", "product_id", "reviewer", "date", "text"])
    writer.writeheader()
    writer.writerows(all_reviews)

print(f"리뷰가 '{csv_file_path}' 파일에 저장되었습니다.")

# 수집 결과 출력
for review in all_reviews:
    print(review)

driver.quit()

# 결과 저장 및 출력
df_products = pd.DataFrame(products)
df_reviews = pd.DataFrame(all_reviews)

print(df_products)
print(df_reviews)

# CSV 저장
df_products.to_csv('zigzag_products.csv', encoding='utf-8-sig', index=False)
df_reviews.to_csv('zigzag_reviews.csv', encoding='utf-8-sig', index=False)

driver.quit()
